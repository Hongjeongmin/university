
text.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a9  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000022c  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d6  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cd  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f2  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  9c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <MCU_initialize>:
#define PPI_PORTC		*((unsigned char *)0x2302)
#define PPI_CW		        *((unsigned char *)0x2303)

void MCU_initialize(void)	/* initialize ATmege128 MCU */
{ 
     MCUCR = 0x80; 			// Enable external memory and I/O, Disable SLEEP mode
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	85 bf       	out	0x35, r24	; 53
     XMCRA = 0x44; 			// 0x1100 - 0x7FFF (1 wait), 0x8000 - 0xFFFF (0 wait)
  a8:	94 e4       	ldi	r25, 0x44	; 68
  aa:	90 93 6d 00 	sts	0x006D, r25
     XMCRB = 0x80; 			// Enable bus keeper. Use PC0-PC7 as high byte of address bus
  ae:	80 93 6c 00 	sts	0x006C, r24

     DDRB  = 0xF0;  		// PORTB = output
  b2:	80 ef       	ldi	r24, 0xF0	; 240
  b4:	87 bb       	out	0x17, r24	; 23
     PORTB = 0x00;
  b6:	18 ba       	out	0x18, r1	; 24

     DDRD  = 0x00;  		// PORTD = output
  b8:	11 ba       	out	0x11, r1	; 17
     PORTD = 0x00;
  ba:	12 ba       	out	0x12, r1	; 18

     DDRE  = 0xFF;  		// PORTE = output 
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	82 b9       	out	0x02, r24	; 2
     PORTE = 0x00;
  c0:	13 b8       	out	0x03, r1	; 3

     DDRF  = 0x00;  		// PORTF = Input
  c2:	10 92 61 00 	sts	0x0061, r1
     PORTF = 0x00;             
  c6:	10 92 62 00 	sts	0x0062, r1
     
     DDRG  = 0x1F;
  ca:	8f e1       	ldi	r24, 0x1F	; 31
  cc:	80 93 64 00 	sts	0x0064, r24

     LCD_CONTROL = 0x00;
  d0:	10 92 00 21 	sts	0x2100, r1
     LCD_DATABUS = 0x00;
  d4:	10 92 00 20 	sts	0x2000, r1
}
  d8:	08 95       	ret

000000da <Delay_us>:

void Delay_us(unsigned char time_us)		/* time delay for us */
{ 
     register unsigned char i;

     for(i = 0; i < time_us; i++) {     // 4 cycle +      
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	07 c0       	rjmp	.+14     	; 0xec <Delay_us+0x12>
        asm (" PUSH  R0 ");     		// 2 cycle +       
  de:	0f 92       	push	r0
        asm (" POP   R0 ");       		// 2 cycle +
  e0:	0f 90       	pop	r0
        asm (" PUSH  R0 ");       		// 2 cycle +
  e2:	0f 92       	push	r0
        asm (" POP   R0 ");       		// 2 cycle +
  e4:	0f 90       	pop	r0
        asm (" PUSH  R0 ");       		// 2 cycle +
  e6:	0f 92       	push	r0
        asm (" POP   R0 ");	     	// 2 cycle = 16 cycle = 1 us for 16MHz
  e8:	0f 90       	pop	r0

void Delay_us(unsigned char time_us)		/* time delay for us */
{ 
     register unsigned char i;

     for(i = 0; i < time_us; i++) {     // 4 cycle +      
  ea:	9f 5f       	subi	r25, 0xFF	; 255
  ec:	98 17       	cp	r25, r24
  ee:	b8 f3       	brcs	.-18     	; 0xde <Delay_us+0x4>
        asm (" PUSH  R0 ");       		// 2 cycle +
        asm (" POP   R0 ");       		// 2 cycle +
        asm (" PUSH  R0 ");       		// 2 cycle +
        asm (" POP   R0 ");	     	// 2 cycle = 16 cycle = 1 us for 16MHz
     }
}
  f0:	08 95       	ret

000000f2 <Delay_ms>:

void Delay_ms(unsigned int time_ms)       	/* time delay for ms */
{ 
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
     register unsigned int i;

     for(i = 0; i < time_ms; i++) {
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	0d c0       	rjmp	.+26     	; 0x11c <Delay_ms+0x2a>
        Delay_us(250);
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	0e 94 6d 00 	call	0xda	; 0xda <Delay_us>
        Delay_us(250);
 108:	8a ef       	ldi	r24, 0xFA	; 250
 10a:	0e 94 6d 00 	call	0xda	; 0xda <Delay_us>
        Delay_us(250);
 10e:	8a ef       	ldi	r24, 0xFA	; 250
 110:	0e 94 6d 00 	call	0xda	; 0xda <Delay_us>
        Delay_us(250);
 114:	8a ef       	ldi	r24, 0xFA	; 250
 116:	0e 94 6d 00 	call	0xda	; 0xda <Delay_us>

void Delay_ms(unsigned int time_ms)       	/* time delay for ms */
{ 
     register unsigned int i;

     for(i = 0; i < time_ms; i++) {
 11a:	21 96       	adiw	r28, 0x01	; 1
 11c:	c0 17       	cp	r28, r16
 11e:	d1 07       	cpc	r29, r17
 120:	80 f3       	brcs	.-32     	; 0x102 <Delay_ms+0x10>
        Delay_us(250);
        Delay_us(250);
        Delay_us(250);
        Delay_us(250);
     }
}    
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <LCD_command>:

void LCD_command(unsigned char command)		/* write a command(instruction) to text LCD */
{
     LCD_CONTROL = 0x00;			// E = 0, Rs = 0
     LCD_CONTROL = 0x01;			// E = 1
     LCD_DATABUS = command;		// output command
 12c:	80 93 00 20 	sts	0x2000, r24
     asm (" PUSH  R0 ");			// delay for about 250 ns
 130:	0f 92       	push	r0
     asm (" POP   R0 ");
 132:	0f 90       	pop	r0
     LCD_CONTROL = 0x00;			// E = 0
 134:	10 92 00 21 	sts	0x2100, r1
     Delay_us(50);
 138:	82 e3       	ldi	r24, 0x32	; 50
 13a:	0e 94 6d 00 	call	0xda	; 0xda <Delay_us>
}
 13e:	08 95       	ret

00000140 <LCD_data>:

void LCD_data(unsigned char data)		/* display a character on text LCD */
{
     LCD_CONTROL = 0x02;			// E = 0, Rs = 1
     LCD_CONTROL = 0x03;			// E = 1
     LCD_DATABUS = data;			// output data
 140:	80 93 00 20 	sts	0x2000, r24
     asm (" PUSH  R0 ");			// delay for about 250 ns
 144:	0f 92       	push	r0
     asm (" POP   R0 ");
 146:	0f 90       	pop	r0
     LCD_CONTROL = 0x02;			// E = 0
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	80 93 00 21 	sts	0x2100, r24
     Delay_us(50);
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	0e 94 6d 00 	call	0xda	; 0xda <Delay_us>
}
 154:	08 95       	ret

00000156 <LCD_string>:

void LCD_string(unsigned char command, unsigned char *string) /* display a string on LCD */
{
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	00 d0       	rcall	.+0      	; 0x164 <LCD_string+0xe>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
     LCD_command(command);			// start position of string
 168:	69 83       	std	Y+1, r22	; 0x01
 16a:	7a 83       	std	Y+2, r23	; 0x02
 16c:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_command>
 170:	69 81       	ldd	r22, Y+1	; 0x01
 172:	7a 81       	ldd	r23, Y+2	; 0x02
 174:	46 2f       	mov	r20, r22
 176:	57 2f       	mov	r21, r23
 178:	8a 01       	movw	r16, r20
     while(*string != '\0') {			// display string
 17a:	02 c0       	rjmp	.+4      	; 0x180 <LCD_string+0x2a>
        LCD_data(*string);
 17c:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_data>
}

void LCD_string(unsigned char command, unsigned char *string) /* display a string on LCD */
{
     LCD_command(command);			// start position of string
     while(*string != '\0') {			// display string
 180:	f8 01       	movw	r30, r16
 182:	81 91       	ld	r24, Z+
 184:	8f 01       	movw	r16, r30
 186:	88 23       	and	r24, r24
 188:	c9 f7       	brne	.-14     	; 0x17c <LCD_string+0x26>
        LCD_data(*string);
        string++;
     }
}
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <LCD_initialize>:

void LCD_initialize(void)			/* initialize text LCD module */
{
     LCD_CONTROL = 0x03;				// E = 1, Rs = 1 (dummy write)
     LCD_CONTROL = 0x02;				// E = 0, Rs = 1
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	80 93 00 21 	sts	0x2100, r24
     Delay_ms(2);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 79 00 	call	0xf2	; 0xf2 <Delay_ms>

     LCD_command(0x38);				// function set(8 bit, 2 line, 5x7 dot)
 1aa:	88 e3       	ldi	r24, 0x38	; 56
 1ac:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_command>
     LCD_command(0x0C);				// display control(display ON, cursor OFF)
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_command>
     LCD_command(0x06);				// entry mode set(increment, not shift)
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_command>
     LCD_command(0x01);				// clear display
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_command>
     Delay_ms(2);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 79 00 	call	0xf2	; 0xf2 <Delay_ms>
}
 1ca:	08 95       	ret

000001cc <LCD_3d>:

void LCD_3d(unsigned int number)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
     unsigned int i,flag;
     flag = 0;
     i = number / 100;
 1d2:	64 e6       	ldi	r22, 0x64	; 100
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	0e 94 45 01 	call	0x28a	; 0x28a <__udivmodhi4>
     if(i == 0) LCD_data(' ');
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	31 f4       	brne	.+12     	; 0x1ec <LCD_3d+0x20>
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_data>
}

void LCD_3d(unsigned int number)
{
     unsigned int i,flag;
     flag = 0;
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <LCD_3d+0x2c>
     i = number / 100;
     if(i == 0) LCD_data(' ');
     else {   LCD_data(i + '0');
 1ec:	86 2f       	mov	r24, r22
 1ee:	80 5d       	subi	r24, 0xD0	; 208
 1f0:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_data>
              flag = 1;
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
          }
      
     number = number % 100;
 1f8:	ce 01       	movw	r24, r28
 1fa:	64 e6       	ldi	r22, 0x64	; 100
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 45 01 	call	0x28a	; 0x28a <__udivmodhi4>
 202:	ec 01       	movw	r28, r24
     i = number / 10; 
 204:	6a e0       	ldi	r22, 0x0A	; 10
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 45 01 	call	0x28a	; 0x28a <__udivmodhi4>
     if((i == 0) && (flag == 0)) LCD_data(' ');
 20c:	61 15       	cp	r22, r1
 20e:	71 05       	cpc	r23, r1
 210:	29 f4       	brne	.+10     	; 0x21c <LCD_3d+0x50>
 212:	21 15       	cp	r18, r1
 214:	31 05       	cpc	r19, r1
 216:	11 f4       	brne	.+4      	; 0x21c <LCD_3d+0x50>
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	02 c0       	rjmp	.+4      	; 0x220 <LCD_3d+0x54>
     else {   LCD_data(i + '0');
 21c:	86 2f       	mov	r24, r22
 21e:	80 5d       	subi	r24, 0xD0	; 208
 220:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_data>
              flag = 1;
          }
     
     i = number % 10;
 224:	ce 01       	movw	r24, r28
 226:	6a e0       	ldi	r22, 0x0A	; 10
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	0e 94 45 01 	call	0x28a	; 0x28a <__udivmodhi4>
     LCD_data(i + '0');
 22e:	80 5d       	subi	r24, 0xD0	; 208
 230:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_data>
}  
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <Beep>:

void Beep(void)					/* beep for 50 ms */
{ 
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
  PORTG |= _BV(3);				// buzzer on
 23e:	c5 e6       	ldi	r28, 0x65	; 101
 240:	d0 e0       	ldi	r29, 0x00	; 0
 242:	88 81       	ld	r24, Y
 244:	88 60       	ori	r24, 0x08	; 8
 246:	88 83       	st	Y, r24
  Delay_ms(50);					// delay 50 ms
 248:	82 e3       	ldi	r24, 0x32	; 50
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 79 00 	call	0xf2	; 0xf2 <Delay_ms>
  PORTG &= ~_BV(3);				// buzzer off
 250:	88 81       	ld	r24, Y
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	88 83       	st	Y, r24
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <Key_input>:

unsigned char Key_input(void)
{
 25c:	1f 93       	push	r17
     register unsigned char key;

     key = PINB & 0x0f;
 25e:	16 b3       	in	r17, 0x16	; 22
 260:	1f 70       	andi	r17, 0x0F	; 15
     if(key == 0x0f) return key;
 262:	1f 30       	cpi	r17, 0x0F	; 15
 264:	29 f4       	brne	.+10     	; 0x270 <Key_input+0x14>
 266:	08 c0       	rjmp	.+16     	; 0x278 <Key_input+0x1c>

     while((PINB & 0x0f) != 0x0f) {
      Delay_ms(1);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 79 00 	call	0xf2	; 0xf2 <Delay_ms>
     register unsigned char key;

     key = PINB & 0x0f;
     if(key == 0x0f) return key;

     while((PINB & 0x0f) != 0x0f) {
 270:	86 b3       	in	r24, 0x16	; 22
 272:	8f 70       	andi	r24, 0x0F	; 15
 274:	8f 30       	cpi	r24, 0x0F	; 15
 276:	c1 f7       	brne	.-16     	; 0x268 <Key_input+0xc>
      Delay_ms(1);
     }
     //Delay_ms(1);
     return key;
}
 278:	81 2f       	mov	r24, r17
 27a:	1f 91       	pop	r17
 27c:	08 95       	ret

0000027e <main>:
#include <avr/io.h>
#include "ATmega128_v28.h"
int main()
{
	DDRA = 0xFF;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
 282:	8b bb       	out	0x1b, r24	; 27
}
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret

0000028a <__udivmodhi4>:
 28a:	aa 1b       	sub	r26, r26
 28c:	bb 1b       	sub	r27, r27
 28e:	51 e1       	ldi	r21, 0x11	; 17
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <__udivmodhi4_ep>

00000292 <__udivmodhi4_loop>:
 292:	aa 1f       	adc	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	a6 17       	cp	r26, r22
 298:	b7 07       	cpc	r27, r23
 29a:	10 f0       	brcs	.+4      	; 0x2a0 <__udivmodhi4_ep>
 29c:	a6 1b       	sub	r26, r22
 29e:	b7 0b       	sbc	r27, r23

000002a0 <__udivmodhi4_ep>:
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	5a 95       	dec	r21
 2a6:	a9 f7       	brne	.-22     	; 0x292 <__udivmodhi4_loop>
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
 2ac:	bc 01       	movw	r22, r24
 2ae:	cd 01       	movw	r24, r26
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
